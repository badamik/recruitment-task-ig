{"version":3,"sources":["components/TableWrapper/TableWrapper.js","components/ErrorInfo/ErrorInfo.js","App.js","serviceWorker.js","index.js"],"names":["TableWrapper","props","className","data","columns","Header","accessor","sortMethod","a","b","parseFloat","substr","minRows","ErrorInfo","message","API_URL","App","makeData","accountList","accountTypes","tableData","map","account","name","profitLoss","currency","accountType","find","acc","id","title","setState","isLoading","state","error","url","fetch","method","headers","Promise","all","this","getDataFromApi","then","resArray","res","json","catch","err","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yXAwCeA,G,YAjCM,SAACC,GAClB,OACI,kBAAC,IAAD,CACIC,UAAU,cACVC,KAAMF,EAAME,KACZC,QAAS,CACL,CACIC,OAAQ,OACRC,SAAU,OACVJ,UAAW,gBAEf,CACIG,OAAQ,gBACRC,SAAU,aACVC,WAAY,SAACC,EAAGC,GAGZ,OAFAD,EAAIE,WAAWF,EAAEG,OAAO,MACxBF,EAAIC,WAAWD,EAAEE,OAAO,KAEb,GAEC,IAIpB,CACIN,OAAQ,eACRC,SAAU,gBAGlBM,QAAS,MCzBNC,G,MAPG,SAACZ,GACf,IAAMa,EAAUb,EAAMa,QACtB,OACI,uBAAGZ,UAAU,sBAAb,+BAA+DY,KCAjEC,EAAU,6CAwEDC,E,YAnEb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KA8BRgB,SAAW,SAACC,EAAaC,GACvB,IAAIC,EAAYF,EAAYG,KAAI,SAAAC,GAC9B,MAAO,CACLC,KAAMD,EAAQC,KACdC,WAAW,GAAD,OAAKF,EAAQG,SAAb,aAA0BH,EAAQE,YAC5CE,YAAaP,EAAaQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAOP,EAAQI,eAAaI,UAG1E,EAAKC,UAAS,WAAO,MAAO,CAAEX,UAAWA,EAAWY,WAAW,OApC/D,EAAKC,MAAM,CACTb,UAAW,GACXY,WAAW,EACXE,OAAO,GANQ,E,4EAUJC,GACb,OAAOC,MAAMD,EAAK,CAChBE,OAAQ,MACRC,QAAS,CACP,WAlBQ,2BAmBR,eAAiB,wB,0CAKF,IAAD,OAClBC,QAAQC,IAAI,CAACC,KAAKC,eAAe3B,EAAU,YAAa0B,KAAKC,eAAe3B,EAAU,kBACnF4B,MAAK,SAACC,GAAD,OAAcL,QAAQC,IAAII,EAASvB,KAAI,SAAAwB,GAAG,OAAIA,EAAIC,cACvDH,MAAK,YAAkC,IAAD,mBAA/BzB,EAA+B,KAAlBC,EAAkB,KACrC,EAAKF,SAASC,EAAaC,MAE5B4B,OAAM,SAAAC,GACL,EAAKjB,UAAS,WAAQ,MAAO,CAAEC,WAAW,EAAOE,MAAOc,EAAIlC,iB,+BAgBhE,OAAG2B,KAAKR,MAAMC,MACL,kBAAC,EAAD,CACLpB,QAAS2B,KAAKR,MAAMC,QAGtB,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,WAEXuC,KAAKR,MAAMD,UACT,kBAAC,IAAD,MAEI,oCACE,kBAAC,EAAD,CACA7B,KAAMsC,KAAKR,MAAMb,YACjB,oE,GA3DF6B,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.14b5dff8.chunk.js","sourcesContent":["import React from 'react';\n\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nimport './styles.scss';\n\nconst TableWrapper = (props) => {\n    return (\n        <ReactTable \n            className=\"react-table\"\n            data={props.data}\n            columns={[\n                {\n                    Header: \"Name\",\n                    accessor: 'name',\n                    className: 'table-header'\n                },\n                {\n                    Header: \"Profit & Loss\",\n                    accessor: 'profitLoss',\n                    sortMethod: (a, b) => {\n                        a = parseFloat(a.substr(1));\n                        b = parseFloat(b.substr(1));\n                        if(a>b) {\n                            return 1;\n                        } else {\n                            return -1;\n                        };\n                    }\n                },\n                {\n                    Header: \"Account Type\",\n                    accessor: 'accountType'\n                }\n            ]}\n            minRows={0}/>\n    )\n}\n\nexport default TableWrapper;","import React from 'react';\n\nimport './styles.scss';\n\nconst ErrorInfo = (props) => {\n    const message = props.message;\n    return (\n        <p className='error-info-message'>Oops, something went wrong: {message}</p>\n    )\n}\n\nexport default ErrorInfo;","import React from 'react';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nimport './App.css';\nimport TableWrapper from './components/TableWrapper/TableWrapper';\nimport ErrorInfo from './components/ErrorInfo/ErrorInfo';\n\nconst API_URL = 'https://recruitmentdb-508d.restdb.io/rest/';\nconst API_KEY = '5d9f48133cbe87164d4bb12c';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state={\n      tableData: [],\n      isLoading: true,\n      error: false\n    }\n  }\n\n  getDataFromApi(url) {\n    return fetch(url, {\n      method: \"GET\",  \n      headers: { \n        'x-apikey': API_KEY, \n        'Content-Type':  'application/json' \n      }\n    })\n  }\n\n  componentDidMount() {\n    Promise.all([this.getDataFromApi(API_URL + \"accounts\"), this.getDataFromApi(API_URL + \"accounttypes\")])\n      .then((resArray) => Promise.all(resArray.map(res => res.json())))\n      .then(([accountList, accountTypes]) => {\n        this.makeData(accountList, accountTypes);\n      })\n      .catch(err => {\n        this.setState(() => { return { isLoading: false, error: err.message } })\n      })\n  }\n\n  makeData = (accountList, accountTypes) => {\n    let tableData = accountList.map(account => {\n      return {\n        name: account.name,\n        profitLoss: `${account.currency}  ${account.profitLoss}`,\n        accountType: accountTypes.find(acc => acc.id === account.accountType).title\n      }\n    })\n    this.setState(() => {return { tableData: tableData, isLoading: false } });\n  }\n\n  render() {\n    if(this.state.error) {\n      return <ErrorInfo\n        message={this.state.error}/>\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"Content\">\n          {\n            this.state.isLoading ?\n              <ClipLoader/>\n              : (\n                  <>\n                    <TableWrapper\n                    data={this.state.tableData}/>\n                    <p>Tip: Click shift for multisort</p>\n                  </>\n              )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}